generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                      String                 @id @default(cuid())
  name                    String?
  email                   String?                @unique
  emailVerified           DateTime?              @map("email_verified")
  image                   String?
  passWord                String?
  role                    Role?                  @default(USER)
  isTwoFactorEnabled      Boolean                @default(false)
  twoFactorConfirmationId String?
  accounts                Account[]
  sessions                Session[]
  twoFactorConfirmation   TwoFactorConfirmation?
}

model VerificationToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid()) @map("_id")
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model ProductTitle {
  id              String            @id @default(cuid()) @map("_id")
  name            String?
  image           String?
  path            String?
  ProductCategory ProductCategory[]
}

model ProductCategory {
  id                  String                @id @default(cuid()) @map("_id")
  name                String?
  productTitleId      String
  image               String?
  path                String?
  productTitle        ProductTitle          @relation(fields: [productTitleId], references: [id], onDelete: Cascade)
  ProductCategoryList ProductCategoryList[]
}

model ProductCategoryList {
  id                String          @id @default(cuid()) @map("_id")
  name              String?
  path              String?
  productCategoryId String
  Product           Product[]
  productCategory   ProductCategory @relation(fields: [productCategoryId], references: [id], onDelete: Cascade)
}

model Product {
  id                    String              @id @default(cuid()) @map("_id")
  name                  String?
  image                 String?
  path                  String?
  productCategoryListId String
  price_old             String?
  price_sale            String?
  start                 String?
  productCategoryList   ProductCategoryList @relation(fields: [productCategoryListId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}
